'use client'
import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import Header from '../components/Header'
import SummaryBar from '../components/SummaryBar'

interface Preferences {
  travelTypes: string[]
  dreamDestinations: string[]
  activities: string[]
  budgetLevel: string
  tripDuration: string
  groupSize: string
  accommodation: string
  transportation: string
}

const travelTypes = [
  { id: 'relaxation', label: 'Ngh·ªâ d∆∞·ª°ng', icon: 'üèñÔ∏è', description: 'Th∆∞ gi√£n, t·∫≠n h∆∞·ªüng' },
  { id: 'exploration', label: 'Kh√°m ph√°', icon: 'üß≠', description: 'ƒêi·ªÉm ƒë·∫øn m·ªõi l·∫°' },
  { id: 'adventure', label: 'Phi√™u l∆∞u', icon: 'üö£', description: 'C·∫£m gi√°c m·∫°nh' },
  { id: 'culture', label: 'VƒÉn h√≥a', icon: 'üèõÔ∏è', description: 'L·ªãch s·ª≠, ngh·ªá thu·∫≠t' }
]

const dreamDestinations = [
  { id: 'beach', label: 'B√£i bi·ªÉn', icon: 'üèñÔ∏è', description: 'Bi·ªÉn xanh, c√°t tr·∫Øng' },
  { id: 'mountains', label: 'V√πng n√∫i', icon: 'üèîÔ∏è', description: 'Kh√¥ng kh√≠ trong l√†nh' },
  { id: 'city', label: 'Th√†nh ph·ªë', icon: 'üèôÔ∏è', description: 'S√¥i ƒë·ªông, hi·ªán ƒë·∫°i' },
  { id: 'countryside', label: 'Mi·ªÅn qu√™', icon: 'üåæ', description: 'Y√™n b√¨nh, m·ªôc m·∫°c' }
]

const activities = [
  { id: 'food', label: '·∫®m th·ª±c', icon: 'üç¥', description: 'Th∆∞·ªüng th·ª©c m√≥n ngon' },
  { id: 'shopping', label: 'Mua s·∫Øm', icon: 'üõçÔ∏è', description: 'SƒÉn ƒë·ªì ƒë·ªôc l·∫°' },
  { id: 'trekking', label: 'Trekking', icon: 'ü•æ', description: 'Leo n√∫i, ƒëi b·ªô' },
  { id: 'diving', label: 'L·∫∑n bi·ªÉn', icon: 'ü§ø', description: 'Kh√°m ph√° ƒë·∫°i d∆∞∆°ng' },
  { id: 'photography', label: 'Ch·ª•p ·∫£nh', icon: 'üì∏', description: 'L∆∞u gi·ªØ kho·∫£nh kh·∫Øc' }
]

// Mapping functions to convert frontend format to backend format
const mapTravelType = (type: string) => {
  const mapping: { [key: string]: string } = {
    'relaxation': 'ngh·ªâ_d∆∞·ª°ng',
    'exploration': 'kh√°m_ph√°', 
    'adventure': 'phi√™u_l∆∞u',
    'culture': 'vƒÉn_h√≥a'
  }
  return mapping[type] || 'kh√°m_ph√°'
}

const mapDreamDestination = (destination: string) => {
  const mapping: { [key: string]: string } = {
    'beach': 'b√£i_bi·ªÉn',
    'mountains': 'v√πng_n√∫i',
    'city': 'th√†nh_ph·ªë',
    'countryside': 'mi·ªÅn_qu√™'
  }
  return mapping[destination] || 'b√£i_bi·ªÉn'
}

const mapActivities = (activities: string[]) => {
  const mapping: { [key: string]: string } = {
    'food': '·∫©m_th·ª±c',
    'shopping': 'mua_s·∫Øm',
    'trekking': 'trekking',
    'diving': 'l·∫∑n_bi·ªÉn',
    'photography': 'ch·ª•p_·∫£nh'
  }
  return activities.map(activity => mapping[activity] || activity)
}

const mapBudgetLevel = (level: string) => {
  const mapping: { [key: string]: string } = {
    'low': 'th·∫•p',
    'medium': 'trung_b√¨nh',
    'high': 'cao'
  }
  return mapping[level] || 'trung_b√¨nh'
}

const mapTravelStyle = (budgetLevel: string) => {
  const mapping: { [key: string]: string } = {
    'low': 'ti·∫øt_ki·ªám',
    'medium': 'tho·∫£i_m√°i',
    'high': 'sang_tr·ªçng'
  }
  return mapping[budgetLevel] || 'tho·∫£i_m√°i'
}

const mapAccommodation = (accommodation: string) => {
  const mapping: { [key: string]: string } = {
    'hotel': 'kh√°ch_s·∫°n',
    'homestay': 'homestay',
    'resort': 'resort',
    'camping': 'camping'
  }
  return mapping[accommodation] || 'kh√°ch_s·∫°n'
}

const mapDuration = (duration: string) => {
  const mapping: { [key: string]: string } = {
    'short': 'ng·∫Øn_h·∫°n',
    'medium': 'trung_h·∫°n',
    'long': 'd√†i_h·∫°n'
  }
  return mapping[duration] || 'trung_h·∫°n'
}

export default function PreferencesPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(1)
  const [preferences, setPreferences] = useState<Preferences>({
    travelTypes: [],
    dreamDestinations: [],
    activities: [],
    budgetLevel: '',
    tripDuration: '',
    groupSize: '',
    accommodation: '',
    transportation: ''
  })
  const [isLoading, setIsLoading] = useState(false)

  const toggleSelection = (category: keyof Preferences, value: string) => {
    setPreferences(prev => {
      const currentArray = prev[category] as string[]
      const newArray = currentArray.includes(value)
        ? currentArray.filter(item => item !== value)
        : [...currentArray, value]
      
      return {
        ...prev,
        [category]: newArray
      }
    })
  }

  const handleNext = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = async () => {
    setIsLoading(true)
    try {
      const token = localStorage.getItem('access_token')
      console.log('Preferences Submit: Starting...')
      
      if (!token) {
        console.error('Preferences Submit: No token found')
        alert('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i')
        router.push('/login')
        return
      }

      // Map frontend preferences to backend survey format
      const surveyData = {
        travel_type: mapTravelType(preferences.travelTypes[0] || preferences.travelTypes[0]),
        dream_destination: mapDreamDestination(preferences.dreamDestinations[0] || 'beach'),
        activities: mapActivities(preferences.activities),
        budget_range: mapBudgetLevel(preferences.budgetLevel || 'medium'),
        travel_style: mapTravelStyle(preferences.budgetLevel || 'medium'),
        accommodation_type: mapAccommodation(preferences.accommodation || 'hotel'),
        group_size: parseInt(preferences.groupSize || '2'),
        duration_preference: mapDuration(preferences.tripDuration || 'medium')
      }

      console.log('Preferences Submit: Sending data to backend:', surveyData)

      const response = await fetch('/api/survey/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(surveyData)
      })

      console.log('Preferences Submit: Response status:', response.status)

      const data = await response.json()
      console.log('Preferences Submit: Response data:', data)

      if (response.ok) {
        console.log('Preferences saved successfully:', data)
        alert('S·ªü th√≠ch ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!')
        // Hi·ªÉn th·ªã recommendations n·∫øu c√≥
        if (data.recommendations) {
          console.log('Recommendations:', data.recommendations)
        }
        // Redirect to dashboard
        console.log('Preferences Submit: Redirecting to dashboard...')
        window.location.href = '/dashboard'
      } else {
        console.error('Preferences save failed:', data)
        alert('C√≥ l·ªói x·∫£y ra: ' + (data.error || 'Kh√¥ng th·ªÉ l∆∞u s·ªü th√≠ch'))
      }
    } catch (error) {
      console.error('Error saving preferences:', error)
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u s·ªü th√≠ch')
    } finally {
      setIsLoading(false)
    }
  }

  const renderStep1 = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">
        B·∫°n th√≠ch lo·∫°i h√¨nh du l·ªãch n√†o?
      </h3>
      <div className="grid grid-cols-2 gap-4">
        {travelTypes.map((type) => (
          <div
            key={type.id}
            onClick={() => toggleSelection('travelTypes', type.id)}
            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
              preferences.travelTypes.includes(type.id)
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <div className="text-center">
              <div className="text-3xl mb-2">{type.icon}</div>
              <h4 className="font-medium text-gray-800">{type.label}</h4>
              <p className="text-sm text-gray-600">{type.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  )

  const renderStep2 = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">
        ƒê√¢u l√† ƒë·ªãa ƒëi·ªÉm m∆° ∆∞·ªõc c·ªßa b·∫°n?
      </h3>
      <div className="grid grid-cols-2 gap-4">
        {dreamDestinations.map((destination) => (
          <div
            key={destination.id}
            onClick={() => toggleSelection('dreamDestinations', destination.id)}
            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
              preferences.dreamDestinations.includes(destination.id)
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <div className="text-center">
              <div className="text-3xl mb-2">{destination.icon}</div>
              <h4 className="font-medium text-gray-800">{destination.label}</h4>
              <p className="text-sm text-gray-600">{destination.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  )

  const renderStep3 = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">
        Ho·∫°t ƒë·ªông n√†o b·∫°n kh√¥ng th·ªÉ b·ªè l·ª°?
      </h3>
      <div className="grid grid-cols-2 gap-4">
        {activities.map((activity) => (
          <div
            key={activity.id}
            onClick={() => toggleSelection('activities', activity.id)}
            className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
              preferences.activities.includes(activity.id)
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
            }`}
          >
            <div className="text-center">
              <div className="text-3xl mb-2">{activity.icon}</div>
              <h4 className="font-medium text-gray-800">{activity.label}</h4>
              <p className="text-sm text-gray-600">{activity.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <SummaryBar currentPage="Kh·∫£o s√°t s·ªü th√≠ch" showBackButton={true} />
      <div className="py-8">
        <div className="max-w-4xl mx-auto px-4">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-800 mb-2">
              H√£y cho ch√∫ng t√¥i bi·∫øt s·ªü th√≠ch c·ªßa b·∫°n!
            </h1>
            <p className="text-gray-600 mb-4">
              ƒêi·ªÅu n√†y s·∫Ω gi√∫p ch√∫ng t√¥i g·ª£i √Ω nh·ªØng chuy·∫øn ƒëi ho√†n h·∫£o d√†nh ri√™ng cho b·∫°n.
            </p>
          
          {/* Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(currentStep / 3) * 100}%` }}
            ></div>
          </div>
          <p className="text-sm text-gray-500">Ti·∫øn ƒë·ªô: {Math.round((currentStep / 3) * 100)}%</p>
        </div>

        {/* Content */}
        <div className="bg-white rounded-lg shadow-sm p-8">
          {currentStep === 1 && renderStep1()}
          {currentStep === 2 && renderStep2()}
          {currentStep === 3 && renderStep3()}

          {/* Navigation */}
          <div className="flex justify-between mt-8">
            <button
              onClick={handlePrevious}
              disabled={currentStep === 1}
              className="px-6 py-2 border border-gray-300 rounded-lg text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Quay l·∫°i
            </button>

            <div className="flex gap-4">
              <button
                onClick={() => router.push('/dashboard')}
                className="px-6 py-2 border border-gray-300 rounded-lg text-gray-600 hover:bg-gray-50"
              >
                B·ªè qua
              </button>

              {currentStep < 3 ? (
                <button
                  onClick={handleNext}
                  className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  Ti·∫øp theo
                </button>
              ) : (
                <button
                  onClick={handleSubmit}
                  disabled={isLoading}
                  className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50"
                >
                  {isLoading ? 'ƒêang l∆∞u...' : 'Ho√†n th√†nh'}
                </button>
              )}
            </div>
          </div>
          </div>
        </div>
      </div>
    </div>
  )
}
