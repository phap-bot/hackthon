version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: travel_planner_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: hackthon
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - travel_planner_network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: travel_planner_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel_planner_network

  # Backend API
  backend:
    build: .
    container_name: travel_planner_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/hackthon?authSource=admin
      - DATABASE_NAME=hackthon
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - DEFAULT_LANGUAGE=vi
      - SUPPORTED_LANGUAGES=vi,en
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - LOG_LEVEL=INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - travel_planner_network

  # Mongo Express (Database Admin UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: travel_planner_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb
    networks:
      - travel_planner_network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  travel_planner_network:
    driver: bridge
